(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){
  var floor = Math.floor;
  function rectangle(x, y, w, h, c){
    x = floor(x);
    y = floor(y);
    return function(W, H, col){
      for (var j=-h; j<=h; ++j)
        for (var i=-w; i<=w; ++i)
          if (0<=(x+i) && (x+i)<W && 0<=(y+j) && (y+j)<H)
            col[(y+j)*W+(x+i)] = c;
      return col;
    };
  };
  return {rectangle: rectangle};
})();

},{}],2:[function(require,module,exports){
module.exports = (function(){
  var Drawers = require("./Drawers.js");

  var abs = Math.abs;
  var floor = Math.floor;
  var sqrt = Math.sqrt;

  function Hitbox(id, dim, pos, vel, fall){
    return {
      id:id,
      dim:dim,
      pos:pos,
      vel:vel,
      fall: fall};
  };

  function drawer(hitbox, c){
    return Drawers.rectangle(hitbox.pos.x, hitbox.pos.y, hitbox.dim.x, hitbox.dim.y, c);
  };

  function tick(dt, space, spaceWidth, spaceHeight, box){
    var w  = box.dim.x, h  = box.dim.y;
    var x  = box.pos.x, y  = box.pos.y;
    var vx = box.vel.x, vy = box.vel.y;
    var sw = spaceWidth;
    var id = box.id;

    // Integrate velocity
    vy += dt * box.fall;

    // Remove from space
    for (var px=-w; px<w; ++px)
      space[(floor(y)-h) * sw + (floor(x)+px)] = 0,
      space[(floor(y)+h) * sw + (floor(x)+px)] = 0;
    for (var py=-h; py<h; ++py)
      space[(floor(y)+py) * sw + (floor(x)-w)] = 0,
      space[(floor(y)+py) * sw + (floor(x)+w)] = 0;

    // Integrate position
    var collisions = {};
    for (var k=0; k<=1; ++k){
      for (var t=0, ts=Math.abs((k?vx:vy)*dt); t<ts; ++t){
        var spd = Math.min(ts - t, 1) * Math.sign(k?vx:vy);
        if (k) x += spd;
        else   y += spd;
        for (var m=0; m<=1; ++m){
          for (var p=(m?-w:-h); p<(m?w:h); ++p){
            if ( space[(floor(y)+(m?-h:p))*sw + (floor(x)+(m?p:-w))]
              || space[(floor(y)+(m? h:p))*sw + (floor(x)+(m?p: w))]){
              collisions[space[(floor(y)+(m?-h:p))*sw + (floor(x)+(m?p:-w))]] = true;
              collisions[space[(floor(y)+(m? h:p))*sw + (floor(x)+(m?p: w))]] = true;
              if (k) x -= spd, vx = 0;
              else   y -= spd, vy = 0;
            };
          };
        };
      };
    };

    // Add to space
    for (var px=-w; px<w; ++px)
      space[(floor(y)-h) * sw + (floor(x)+px)] = id,
      space[(floor(y)+h) * sw + (floor(x)+px)] = id;
    for (var py=-h; py<h; ++py)
      space[(floor(y)+py) * sw + (floor(x)-w)] = id,
      space[(floor(y)+py) * sw + (floor(x)+w)] = id;

    // Save
    box.pos.x = x;
    box.pos.y = y;
    box.vel.x = vx;
    box.vel.y = vy;

    // Returns collisions
    delete collisions[0];
    return collisions;
  };

  function destroy(box, space, spaceWidth, spaceHeight){
    var w  = box.dim.x, h  = box.dim.y;
    var x  = box.pos.x, y  = box.pos.y;
    var vx = box.vel.x, vy = box.vel.y;
    var sw = spaceWidth;
    // Remove from space
    for (var px=-w; px<w; ++px)
      space[(floor(y)-h) * sw + (floor(x)+px)] = 0,
      space[(floor(y)+h) * sw + (floor(x)+px)] = 0;
    for (var py=-h; py<h; ++py)
      space[(floor(y)+py) * sw + (floor(x)-w)] = 0,
      space[(floor(y)+py) * sw + (floor(x)+w)] = 0;
  };


  // *Hitbox, Hitbox -> Hitbox
  //function slide(a, b){
    //var ax = a.pos.x, ay = a.pos.y, aw = a.dim.x, ah = a.dim.y;
    //var bx = b.pos.x, by = b.pos.y, bw = b.dim.x, bh = b.dim.y;
    //var avx = a.vel.x, avy = a.vel.y;
    //var axi = ax - aw*0.5, axf = ax + aw*0.5;
    //var ayi = ay - ah*0.5, ayf = ay + ah*0.5;
    //var bxi = bx - bw*0.5, bxf = bx + bw*0.5;
    //var byi = by - bh*0.5, byf = by + bh*0.5;
    //var dx = abs(bx - ax) - (aw*0.5 + bw*0.5);
    //var dy = abs(by - ay) - (ah*0.5 + bh*0.5);

    //console.log("a:", ax, ay, aw, ah);
    //console.log("b:", bx, by, bw, bh);
    //console.log("av:", avx, avy);
    //console.log("axr:",axi, axf, "ayr:",ayi, ayf);
    //console.log("bxr:",bxi, bxf, "byr:",byi, byf);
    //console.log("d:",dx,dy);

    //if (bx >= 0 || dy >= 0)
      //return a;

    //if (dx > dy) {
      //if (bxi < axi && axi < bxf && avx <= 0) {
        //a.pos.x += bxf - axi;
        //a.vel.x = 0;
      //}
      //if (bxi < axf && axf < bxf && avx >= 0) {
        //a.pos.x += bxi - axf;
        //a.vel.x = 0;
      //}
    //} else  {
      //if (byi < ayi && ayi < byf && avy <= 0){
        //a.pos.y -= dy;
        //a.vel.y = 0;
      //}
      //if (byi < ayi && ayi < byf && avy >= 0){
        //a.pos.y += dy;
        //a.vel.y = 0;
      //}
    //};

    //return a;
  //};

  return {
    Hitbox: Hitbox,
    drawer: drawer,
    destroy: destroy,
    tick: tick};
})();

},{"./Drawers.js":1}],3:[function(require,module,exports){
module.exports = (function(){
  var down = [], last = [], pressed = [], released = [];
  for (var i=0; i<255; ++i){
    var k = String.fromCharCode(i);
    down[k] = last[k] = pressed[k] = released[k] = 0;
  };
  document.onkeypress = function(e){
    down[String.fromCharCode(e.keyCode).toLowerCase()] = 1;
  };
  document.onkeyup = function(e){
    down[String.fromCharCode(e.keyCode).toLowerCase()] = 0;
  };
  function tick(){
    for (var i=0; i<255; ++i){
      var k = String.fromCharCode(i);
      pressed[k]  = !last[k] &&  down[k];
      released[k] =  last[k] && !down[k];
      last[k]     = down[k];
    };
  };
  return {down: down, pressed: pressed, released: released, tick: tick};
});

},{}],4:[function(require,module,exports){
module.exports = (function(){
  // Uint, Uint -> Screen
  function Screen(width, height){
    var canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    var context = canvas.getContext("2d");
    var imageData = context.getImageData(0, 0, width, height);
    var colorBuffer = new ArrayBuffer(width*height*4);
    var colorBuffer8 = new Uint8ClampedArray(colorBuffer);
    var colorBuffer32 = new Uint32Array(colorBuffer);
    var depthBuffer = new ArrayBuffer(width*height*2);
    var depthBuffer16 = new Uint16Array(depthBuffer);
    return {
      canvas: canvas,
      context: context,
      width: width,
      height: height,
      imageData: imageData,
      colorBuffer8: colorBuffer8,
      colorBuffer32: colorBuffer32,
      depthBuffer16: depthBuffer16};
  };

  // Uint32Array, *Screen -> Screen
  function drawBuffer(buffer8, screen){
    screen.imageData.data.set(buffer8);
    screen.context.putImageData(screen.imageData, 0, 0);
  };

  // [(Number, Number, *Uint32Array -> Uint32Array)] -> *Screen -> Screen
  function drawDrawers(drawers, screen){
    var colorBuffer32 = screen.colorBuffer32;
    for (var i=0, l=drawers.length; i<l; ++i)
      colorBuffer32 = drawers[i](screen.width, screen.height, colorBuffer32);
    screen.imageData.data.set(screen.colorBuffer8);
    screen.context.putImageData(screen.imageData, 0, 0);
    return screen;
  };

  // (Uint, Uint -> RGBA8), *Screen -> Screen
  function draw(field, screen){
    var colorBuffer32 = screen.colorBuffer32;
    var width = screen.width;
    var height = screen.height;
    for (var y=0; y<height; ++y)
      for (var x=0; x<width; ++x)
        colorBuffer32[y*width+x] = field(x, y);
    screen.imageData.data.set(screen.colorBuffer8);
    screen.context.putImageData(screen.imageData, 0, 0);
    return screen;
  };

  function drawImage(x, y, image, screen){
    screen.context.drawImage(image, x, y);
  };

  // *Screen -> Screen
  function clear(screen, col){
    screen.colorBuffer32.fill(col);
  };

  return {
    Screen: Screen,
    drawBuffer: drawBuffer,
    drawDrawers: drawDrawers,
    drawImage: drawImage,
    draw: draw,
    clear: clear};
})();


},{}],5:[function(require,module,exports){
module.exports = function(callback){
  var sprites = {
    "wall": {size: 1, images:[]},
    "main_standing": {size: 2, images:[]}};
  var loaded = 0;
  var total = 0;
  for (var key in sprites){
    (function (key){
      console.log("loading sprite "+key);
      for (var i=0; i<sprites[key].size; ++i){
        (function(i){
          ++total;
          var image = new Image();
          image.src = "img/"+key+"/sprite_"+i+".png";
          image.onload = function(){
            console.log("loaded "+(loaded+1)+"/"+total);
            sprites[key].images[i] = image;
            if (++loaded === total)
              callback(sprites);
          };
        })(i);
      };
    })(key);
  };
};



},{}],6:[function(require,module,exports){
module.exports = [
  ["................................",
   ".XXX.XX..XXX.XX.................",
   ".X.X.X.X.X.X.X..................",
   ".XXX.XX..X.X.XX.................",
   ".X...X.X.X.X.X..................",
   ".X...X.X.XXX.X..................",
   "................................",
   "X..........................DXXXX",
   "X..........................DXXXX",
   "X.H........................DXXXX",
   "X..........XXXXXX..........DXXXX",
   "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"],
  ["................................",
   ".XXX.XX..XXX.XX.................",
   ".X.X.X.X.X.X.X..................",
   ".XXX.XX..X.X.XX.................",
   ".X...X.X.X.X.X..................",
   ".X...X.X.XXX.X..................",
   "...............K................",
   "X..........................DXXXX",
   "X..........................DXXXX",
   "X.H........................DXXXX",
   "X..........XXXXXX..........DXXXX",
   "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"]];

},{}],7:[function(require,module,exports){
module.exports = (function(){
  // Number, Number -> V2
  function Vector2(x, y){
    return {x: x, y: y};
  }
  
  // V2, V2 -> Number
  function angle(a, b){
    var ang = (Math.atan2(b.y, b.x) - Math.atan2(a.y, a.x) + Math.PI*2) % (Math.PI*2);
    if (ang > Math.PI) ang -= Math.PI*2;
    return ang;
  };

  // V2 -> Number
  function len(a){
    return Math.sqrt(a.x*a.x + a.y*a.y);
  };

  // V2, Number -> V2
  function scale(a, s){
    return Vector2(a.x * s, a.y * s);
  };

  // V2 -> Number
  function normalize(a){
    return scale(a, 1/len(a)); 
  };

  // V2, Number -> V2
  function rotate(a, ang){
    return {
      x: a.x * Math.cos(ang) - a.y * Math.sin(ang),
      y: a.x * Math.sin(ang) + a.y * Math.cos(ang)};
  };

  // V2, V2 -> V2
  function sub(a, b){
    return {
      x: a.x - b.x,
      y: a.y - b.y};
  };

  // V2, V2 -> V2
  function add(a, b){
    return {
      x: a.x + b.x,
      y: a.y + b.y};
  };

  return {
    Vector2: Vector2,
    rotate: rotate,
    angle: angle,
    add: add,
    sub: sub,
    len: len,
    scale: scale,
    normalize: normalize};
})();

},{}],8:[function(require,module,exports){
//var Image = require("./../../Dattata/Image.js");
var Screen = require("./Screen.js");
var Sprites = require("./Sprites.js");
var Hitbox = require("./Hitbox.js");
var Drawers = require("./Drawers.js");
var Vector2 = require("./Vector2.js");
var stages = require("./Stages.js");
var Key = require("./KeyboardState.js")();
var V2 = Vector2.Vector2;
var floor = Math.floor;
var sqrt = Math.sqrt;
var FPS = 60;
var sprites;
var screen = Screen.Screen(window.innerWidth, window.innerHeight);
var gameObjects;
var gameObjectById;
var hero;
var game;
var level;
var space;
var spaceWidth;
var spaceHeight;

var Neo = (function(){
  var nextId = 0;
  return function(w, h, x, y, fall){
    var id = ++nextId;
    var obj = {
      id: id,
      render: function(screen){},
      tick: function(dt){},
      destroy: function(){
        Hitbox.destroy(obj.hitbox, space, spaceWidth, spaceHeight);
        delete gameObjectById[obj.id];
        gameObjects = gameObjects.filter(function(obj_){
          return obj_.id !== obj.id;
        });
      },
      hitbox: Hitbox.Hitbox(id, V2(w, h), V2(x, y), V2(0, 0), fall)};
    gameObjects.push(obj);
    gameObjectById[obj.id] = obj;
    return obj;
  };
})();

var intro = Intro();
var menu = Menu();
var runningApp = intro;

function interact_with_human(kill_humans, be_nice_to_humans){
  var is_crazy_murdering_robot = false;
  if (is_crazy_murdering_robot = true)
    kill_humans();
  else
    be_nice_to_humans();
};

function Intro(){
  var selected = 0;
  var options = [0, 1, 2];
  var prev = {};
  function tick(dt){
    if (Key.pressed.w)
      selected = (selected - 1 + 3) % 3;
    if (Key.pressed.s)
      selected = (selected + 1 + 3) % 3;
    if (Key.pressed.j)
      StartLevel(0);
  };
  function render(screen){
    Screen.drawDrawers(options.map(function(i){
      var col = i === selected ? 0xFFAAAAAA : 0xFFCCCCCC;
      return Drawers.rectangle(32*5, 32*(1+i*2), 32*4, 16, col);
    }), screen);
  };
  return {tick: tick, render: render};
};

function KillerRobot(x, y){
  var obj = Neo(2, 2, x, y, 0);
  var charge = 0;
  obj.tick = function(dt){
    charge += dt;
    if (charge > 1){
      charge = 0;
      var dir = Vector2.sub(hero.hitbox.pos, obj.hitbox.pos);
      Laser(obj.hitbox.pos.x, obj.hitbox.pos.y, dir.x, dir.y);
    };
  };
  obj.draw = function(x, y){
    screen.context.drawImage(sprites.main_standing.images[0], x, y);
  };
  return obj;
};

function Laser(x, y, dx, dy){
  var d = Math.sqrt(dx*dx + dy*dy);
  var obj = Neo(3, 3, x+dx/d*16, y, 0);
  obj.type = "Laser";
  obj.hitbox.vel.x = dx/d*500;
  obj.hitbox.vel.y = dy/d*500;
  obj.draw = function(x, y){
    screen.context.drawImage(sprites.main_standing.images[0], x, y);
    //return Drawers.rectangle(x, y, obj.hitbox.dim.x, obj.hitbox.dim.y, 0xFFFFAAAA);
  };
  obj.onCollide = function(other){
    obj.destroy();
    if (other.type === "Hero")
      StartLevel(level);
      
  };
};

function Hero(x, y){
  var obj = Neo(16, 16, x, y, 400);
  var canJump = 1;
  obj.type = "Hero";
  obj.tick = function(dt){
    var pad = V2(Key.down.d - Key.down.a, Key.down.s - Key.down.w);
    obj.hitbox.vel.x = pad.x * 140;
    if (canJump && Key.pressed.j){
      obj.hitbox.vel.y = -220;
      canJump = 0;
    };
  };
  obj.draw = function(x, y){
    var i = Math.floor(((Date.now()/1000)*4)%2);
    screen.context.drawImage(sprites.main_standing.images[i], x, y);
  };
  obj.onCollide = function(obj){
    if (!obj) return; // TODO: FIXME
    if (obj.type === "Wall")
      canJump = 1;
    if (obj.type === "Door")
      StartLevel(level + 1);
  };
  return obj;
};

function Wall(x,y){
  var obj = Neo(16,16, x,y, 0);
  function tick(){};
  function draw(x, y){
    screen.context.drawImage(sprites.wall.images[0], x, y);
    //return Drawers.rectangle(x, y, obj.hitbox.dim.x, obj.hitbox.dim.y, 0xFFAAAAAA);
  };
  obj.type = "Wall";
  obj.tick = tick;
  obj.draw = draw;
  return obj;
};

function Door(x,y){
  var obj = Neo(16,16, x,y, 0);
  function tick(){};
  function draw(x, y){
    screen.context.drawImage(sprites.main_standing.images[0], x, y);
  };
  obj.type = "Door";
  obj.tick = tick;
  obj.draw = draw;
  return obj;
  
};

function Game(stage){
  var count = 0;
  gameObjects = [];
  gameObjectById = {};
  for (var j=0; j<stage.length; ++j){
    var line = stage[j];
    for (var i=0; i<line.length; ++i){
      switch (line[i]){
        case "H": hero = Hero(i*32-16, j*32-16); break;
        case "X": Wall(i*32-16, j*32-16); break;
        case "D": Door(i*32-16, j*32-16); break;
        case "K": KillerRobot(i*32-16, j*32-16); break;
      }
    };
  };

  function tick(dt){
    if (Key.pressed.m)
      runningApp = menu;
    for (var i=0, l=gameObjects.length; i<l; ++i){
      gameObjects[i].tick(dt);
      var collisions = Hitbox.tick(dt, space, spaceWidth, spaceHeight, gameObjects[i].hitbox);
      if (gameObjects[i].onCollide)
        for (var id in collisions){
          gameObjects[i].onCollide(gameObjectById[id]);
          if (gameObjectById[id].onCollide)
            gameObjectById[id].onCollide(gameObjectById[i]);
            
        }
    };
  };
  function render(screen){
    screen.context.clearRect(0, 0, screen.width, screen.height);
    for (var i=0; i<gameObjects.length; ++i){
      var obj = gameObjects[i];
      var pos = Vector2.add(
        Vector2.sub(obj.hitbox.pos, hero.hitbox.pos),
        V2(screen.width/2, screen.height/2));
      obj.draw(pos.x, pos.y);
    };
  };
  return {tick: tick, render: render};
};

function Menu(){
  function tick(dt){
    if (Key.pressed.j)
      runningApp = game;
  };
  function render(screen){
    Screen.drawDrawers([Drawers.rectangle(32, 32, 8, 8, 0xFFFFAAAA)], screen);
  };
  return {tick: tick, render: render};
};

function StartLevel(lv){
  console.log("?");
  setTimeout(function(){
    spaceWidth = 2048;
    spaceHeight = 2048;
    space = new Uint16Array(spaceWidth * spaceHeight);
    runningApp = game = Game(stages[lv%stages.length]);
    console.log("?", stages[lv%stages.length], lv, stages.length);
    level = lv;
  }, 1);
};

window.onload = function(){
  Sprites(function(sprites_){
    sprites = sprites_;
    var main = document.getElementById("main");
    screen.canvas.style = [
      "image-rendering: optimizeSpeed;",
      "image-rendering: -moz-crisp-edges;",
      "image-rendering: -webkit-optimize-contrast;",
      "image-rendering: -o-crisp-edges;",
      "image-rendering: pixelated;",
      "-ms-interpolation-mode: nearest-neighbor;"].join("");
    main.appendChild(screen.canvas);
    setInterval(function(){
      Key.tick();
      runningApp.tick(1/FPS);
      Screen.clear(screen);
      runningApp.render(screen);
    }, 1000/FPS);

    document.body.appendChild(sprites.main_standing.images[0]);
  });
};


},{"./Drawers.js":1,"./Hitbox.js":2,"./KeyboardState.js":3,"./Screen.js":4,"./Sprites.js":5,"./Stages.js":6,"./Vector2.js":7}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
